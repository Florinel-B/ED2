
#include unordered_map
#include unordered_set
struct Duro {
    using ID = std::string
    ID asignatura
    int horas_estimadas
    int horas_actuales
    Date fechaExamen

    ID getID{
        return asignatura
    }
}
template <typename T>
class Negrata {
    using ID = T::ID

    void insertarAsignatura(ID id, Date date, int horas, std::list Dependencias) {
        Duro nuevo {id, horas, 0 , date};
        nodos[id] = nuevo;
        for (const auto& elem : Dependencias){
            nodos.contains(elem.getID()) ? ListaAdj[id].insert(elem) : throw Exception;
        }
    }
    void insertarDepend(T a, T b){
        ListaAdj[a.getID()].insert(b)

    }
    auto devolverAdj(T a){
        ListaAdj[a.getID()]
    }

    bool relacionHoras(T a) {
        auto set = devolverAdj(a)
        int horas = a.horas_estimadas - a.horas_actuales
        for (const auto& val : set){
            horas -= val.horas_actuales
        } 
        return horas >= 0

    }

    void aumentarHoras(std::list<ID> lista, std::list<int> horas) {
        for (const auto& elem: lista){
            nodos[elem].horas_actuales += horas.pop_front()
        } 
    }
    
    void aumentarHoras(std::list<ID> lista, std::list<date> fecha) {
        for (const auto& elem: lista){
            nodos[elem].fechaExamen = horas.pop_front()
        } 
    }



    private: 
        std::unordered_map<ID, T> nodos
        std::unordered_map<ID, std::unordered_set<T>> ListaAdj
}



template <typename T>
void equilibrio(T tree) {
    using Nodo = T::Node
    using Tipo = T::Type 
    auto root = tree.getRoot()
    equilibrioNodo(root)

}

int equilibrioNodo(Node* nodo) {
    if (!nodo){
        return 0
    }
    auto left = getLeft(nodo)
    auto right = getRight(nodo)

    if (!(left && right)) return 1

    int equilibrioIzq = equilibrioNodo(left)
    
    int equilibrioDer = equilibrioNodo(right)

    if (isRoot(nodo)){
        return abs(equilibrioDer - equilibrioIzq) > 1
    }

    return equilibrioDer + equilibrioIzq
}

int equilibrioArbol(Node* nodo = const getRoot()) {
     if (!nodo){
        return 0
    }

    auto left = getLeft(nodo)
    auto right = getRight(nodo)

    if !(left || right) return 1
    if !(right && left) return -1

    izq = equilibrioArbol(left)
    der = equilibrioArbol(right)
    
    if (der == -1 || izq == -1) return -1
    if (equilibrioDer * 2 > equilibrioIzq ||  equilibrioDer / 2) return -1 

    return izq + der

}


std::vector<TElemento> PadresNoAbuelos(T Tree) {
    auto raiz = getRoot(Tree)
    std::stack<TElemento> recorrido
    std::vector<TElemento> elem
    recorrido.push(raiz)
    while (!recorrido.empty()){
        auto accElem = recorrido.top()
        recorrido.pop()
        auto left = getLeft(accElem)
        auto right = getRight(accElem)
        if (EsHoja(left) && EsHoja(right)){
            elem.push_back(accElem)
            continue
        }
        if(!EsHoja(left)) recorrido.push(left)
        if(!EsHoja(right)) recorrido.push(right)
    }
    return elem
}

template <typename S>
class grafo{
    using ID = S::ID

    grafo () : AdjList(), empleados() {    };
    grafo(std::vector<std::pair<S,S>> lista) : {
        for (const auto& [empleado, jefe] : lista) {
            empleados[jefe.getID()] = jefe
             empleados[empleado.getID()] = empleado
            AdjList[jefe.getID()].insert(empleado.getID())
        }
    }

    ID obtenerCEO(){
        for (const auto& [idJEFE, empleados] : adjList){
                bool jefe = true;
                for (const auto& [id, empleados1] : adjList){
                    if (id == idJEFE || !jefe){
                        break;
                    }
                    jefe = empleados1.contains(idJEFE)
            }
            if (jefe) return idJEFE;
        }
    }

    private :
    std::unordered_map<ID, S> empleados
    std::unordered_map<ID, std::unordered_set<ID>> AdjList 

}
template <typename S>
class NaryTree{
    using ID = S::ID
    template <typename T>
    class Node {
        using ID = T::ID
        friendClass NaryTree;
        private: 
            ID Data
            Node* parent
            unordered_set<std::shared_ptr<Node<T>>> empleadosDirectos
        public: 
        Node() : info(), parent(nullptr), children() {} 
		Node(S e) : info(e), parent(nullptr), children() {} 
		Node(S e, Node<S>* parent) : info(e), parent(parent), children() {} 
    }
    
    public :
        NaryTree() {} : raiz{}

        NaryTree(grafo grafo) : {
            auto id = grafo.obtenerCEO()
            raiz = make_shared<Node<T>>(id)
            for (const auto& elem : grafo::adjList[id]){
                auto a  = std::make_shared<Node<T>>(elem, raiz.get())
                raiz->empleadosDirectos.insert(a)
                añadirInfo(elem, a.get())
            }
        } 

        
        


        
    private : 
        std::shared_ptr<Node<T>> raiz;
        void añadirInfo(grafo grado , Node* nodo){
            for (const auto& elem : grafo::adjList[id]){
                auto a = std::make_shared<Node<T>>(elem, nodo)
                raiz->empleadosDirectos.insert(a)
                añadirInfo(elem, a.get())
            }
        }
}

template <typename S>
class LevelIterator {
    using Type = S::ID
    using Node = S::Node
    LevelIterator () :arbol{}
    LevelIterator (S tree, int level) : arbol(tree)  {
        iranivel(tree, level);
    } 

    LevelIterator &operator++ ()  {
        if (!cola.empty()){
            auto vector = cola.front()
            cola.pop()

        }
        return *this
    }

    
    
    LevelIterator operator++ (int)  {
        auto tmp{this*};
        operator++;
        return tmp;
    }

    Type operator*() { return arbol.getElement(cola.front()); } // GET ELEMENT DEVUELVE UN VECTOR ITERABLE DE IDs para simplificacion
    bool operator!=(const LevelIterator& other) const { return !(cola.empty() && other.cola.empty()); }

    


    private : 
    S arbol;
    std::queue<std::vector<std::shared_ptr<Node<Type>>>> cola;
    void iranivel(S arbol, int level){
        int depthacc = 0
        Node acc = arbol.getRoot()
        auto lastelem = acc->empleadosDirectos
        cola.push(acc->empleadosDirectos)
        while (!cola.empty()){
            auto vector = cola.front()
            cola.pop()
            if (lastelem == vector) {
                depthacc += 1
            }
            for (const auto& elem : vector) {
                cola.push(elem->empleadosDirectos)
            }
            if (depthacc == level) {
                return;
            }
        }
    }

}



template <typename T>
class LinkedBinaryTree {
public:
    using type = T;
    template <typename S>
    class Node {
        friend class LinkedBinaryTree;
        S info;
        Node<S>* parent;
        std::shared_ptr<Node<S>> left;
        std::shared_ptr<Node<S>> right;
    };

    T getElement(Node<T>* node) const {return (node->info);}
    Node<T>* getRoot()                   const {return root.get();}
    Node<T>* getParent(Node<T>* node)     const {return (node->parent);}
    Node<T>* getLeftChild(Node<T>* node) const {return (node->left.get());}
    Node<T>* getRightChild(Node<T>* node) const {return (node->right.get());}

    bool isEmpty() {return root == nullptr;}
    bool isRoot(Node<T>* node) const {return (node == root.get());}
    bool isLeaf(Node<T>* node) const {return ((node->left == nullptr) && (node->right == nullptr));}
    bool isInternal(Node<T>* node) const {return !isLeaf(node);}

    Node<T>* addRoot(T e) {
        root = std::make_shared<Node<T>>();
        root->info = e;
        root->parent = nullptr;
        root->left = nullptr;
        root->right = nullptr;
        return (root.get());
    }
    Node<T>* addLeft(T e, Node<T>* parent) {
        parent->left = std::make_shared<Node<T>>();
        parent->left->info = e;
        parent->left->parent = parent;
        parent->left->left = nullptr;
        parent->left->right = nullptr;
        return (parent->left.get());
    }
    Node<T>* addRight(T e, Node<T>* parent) {
        parent->right = std::make_shared<Node<T>>();
        parent->right->info = e;
        parent->right->parent = parent;
        parent->right->left = nullptr;
        parent->right->right = nullptr;
        return (parent->right.get());
    }

    auto merge(LinkedBinaryTree a, LinkedBinaryTree b) {
        std::stack<T> arbolA
        std::stack<T> arbolB
        std::vector<T> lista
        rootA = a.getRoot()
        rootB = b.getRoot()
        while (rootA != nullptr) {
            arbolA.push(rootA);
            rootA = t.getLeftChild(rootA);
        }
        while (rootB != nullptr) {
            arbolB.push(rootB);
            rootB = t.getLeftChild(rootB);
        }
        while (!arbolA.empty() || !arbolB.empty()){
            auto nodeA = arbolA.top()
            auto nodeB = arbolB.top()
            if (nodeA > nodeB){
                lista.push_back(nodeA)
                arbolA.pop()
                auto right = t.getRightChild(nodeA);
                if (right) {
                    while (nodeA != nullptr) {
                        arbolA.push(nodeA);
                        nodeA = t.getLeftChild(nodeA);
                    }
                }
            }
            if (nodeA == nodeB) {
                lista.push_back(nodeA)
                arbolA.pop()
                arbolB.pop()
                while (nodeA != nullptr) {
                    arbolA.push(nodeA);
                    nodeA = t.getLeftChild(nodeA);
                }
                while (nodeB != nullptr) {
                    arbolB.push(nodeB);
                    nodeB = t.getLeftChild(nodeB);
                }
            }
            else {
                lista.push_back(nodeB)
                arbolB.pop()
                while (nodeB != nullptr) {
                    arbolB.push(nodeB);
                    nodeB = t.getLeftChild(nodeB);
                }

            }
        }


        return lista
    }
    void cambiarpos(Node* nodo) {
        auto left =  getLeft(node);
        auto right = getRight(node);
        if (!right) {
                auto padre = node -> parent;
                if (getLeft() == node){
                    padre->left = left
                    left->padre = padre
                }
                else {
                    padre->right = left
                    left->padre = padre
                }
            
            if (!left) {
                auto padre = node -> parent;
                if (getLeft() == node){
                    padre->left = right
                    right->padre = padre
                }
                else {
                    padre->right = right
                    right->padre = padre
                }
            }

        }


    }

    LinkedBinaryTree removeHalfNodes() { // quita los nodos con un solo hijo y lo sustituye por su hijo 
        std::stack<T> nodos;
        nodos.push(root.get())
        while (!nodos.empty()){
            auto node = nodos.top()
            nodos.pop()
            if (node.isLeaf()){continue} //salto a la siguiente itreacion
            auto left =  getLeft(node);
            auto right = getRight(node);
            if (right || left){cambiarpos(node)}
            nodos.push(right)
            nodos.push(left)
    }


    


private:
    std::shared_ptr<Node<T>> root = nullptr;
};





// llamo al contructor de node sin saber implementacion directamete
// es un pair dado que una conexion solo guarda la ip del server y el puerto y en el otro lado todo las conexiones posibles mas adelnte se crea un grafo a partir de todo
template <typename T>
class ConnectionManager {
    using Node = T::Node
    using IP = Node::IP
    ConnectionManager(const int N, IP ip, int puerto) : {
        auto nodo = Node{ip, puerto}
        grafo[Node] = std::make_pair(N, {})
    }
    bool newConnection(IP ip, int puerto) {
        auto nodo = Node{ip, puerto}
        if (grafo.second.first > 0 && !grafo.second.second.contains(ip)){
            grafo.second.second.insert(ip)
            grafo.second.first -= 1
            return true
        }
        return false   
    }
    bool closeConnection(IP ip, int puerto) {
        if (grafo.second.second.erase(ip) == 1){
                return true
            }
        }
        return false
    }

    int closeAllConnection() {
        auto connection = grafo.second
        const int tam = connection.second.size()
        connection.first += tam
        connection.second.clear()
        return tam
    }


int numberOfConnections() {

        auto connection = grafo.second
        const int tam = connection.second.size()
        return tam
    }


    private: 
    std::pair<Node, std::pair<int, unordered_set<Node>>> grafo; 



}

template <typename T>
class netP2P{
    using Node = T::Node
    using IP = Node::IP
    netP2P(T server) : {superserver[server] = std::make_pair<100 ,{}>}

    void newNode(T server) {
        netP2P{server};
        for (const auto& [server1, par] : superserver) {
            if (server1 != server && par.first > 0) {
                superserver[server].second.insert(server1)
                superserver[server].first += 1
                par.first -= 1
                par.second.insert(server)
            }

        }
    }

    bool closeCLient(T cliente, T server) {
        if (superserver[server].second.erase(client) == 1){
            superserver[server].first += 1
            return true
        }
        return false
    }
    void shutDownServer(T server){
        superserver[server].second.clear()
        superserver[server].first = 100
    }
    void completeShutDown(T server) {
        superserver[server].second.clear()
        for (const auto& [server, par] : superserver) {
            if (par.second.erase(server) == 1) par.first += 1
        }
        superserver.erase(server)
    }
    auto clientServer () {
        std::vector<T> client_server
        for (const auto& [server1, par1] : superserver){
            if (par.second.empty()) break
            for (const auto& [server, par] : superserver){
                if (par.second.contains(server1)) {client_server.push_back(server1); break}
        }
        }
        return client_server
    }

    auto Servers () {
        std::vector<T> client_server
        for (const auto& [server1, par1] : superserver){
            if (par.second.empty()) break
            bool server = true
            for (const auto& [server, par] : superserver){

                if (par.second.contains(server1)) {server = false ; break;}
        }
            if (server){
            client_server.push_back(server1)
            }
        }
        return client_server
    }

    auto client() {
        std::vector<T> client_server
        for (const auto& [server1, par1] : superserver){
            if (par.second.empty()) client_server.push_back(server1)}
        return client_server
    }
    auto everyPair() {
        return superserver.size()
    }

    private:
    
    std::unordered_map<T, std::pair<int ,unordered_set<T>>> superserver

// T esa hasheable gracias al ip que contiene, supongo que ya esta declarado 

}

